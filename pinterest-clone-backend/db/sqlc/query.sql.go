// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc

import (
	"context"
	"time"
)

const createSession = `-- name: CreateSession :exec
insert into
    sessions (
        sid,
        user_id,
        expires_at,
        ip,
        user_agent
    )
values ($1, $2, $3, $4, $5)
`

type CreateSessionParams struct {
	Sid       string    `json:"sid"`
	UserID    int64     `json:"user_id"`
	ExpiresAt time.Time `json:"expires_at"`
	Ip        string    `json:"ip"`
	UserAgent string    `json:"user_agent"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.Exec(ctx, createSession,
		arg.Sid,
		arg.UserID,
		arg.ExpiresAt,
		arg.Ip,
		arg.UserAgent,
	)
	return err
}

const createUser = `-- name: CreateUser :one
insert into
    users (
        first_name,
        last_name,
        email,
        password
    )
values ($1, $2, $3, $4)
returning
    id
`

type CreateUserParams struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
	Password  []byte `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const destroyAllSessions = `-- name: DestroyAllSessions :many
delete from sessions where user_id = $1 returning sid
`

func (q *Queries) DestroyAllSessions(ctx context.Context, userID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, destroyAllSessions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var sid string
		if err := rows.Scan(&sid); err != nil {
			return nil, err
		}
		items = append(items, sid)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const destroySession = `-- name: DestroySession :exec
delete from sessions where sid = $1
`

func (q *Queries) DestroySession(ctx context.Context, sid string) error {
	_, err := q.db.Exec(ctx, destroySession, sid)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, password from users where email = $1
`

type GetUserByEmailRow struct {
	ID       int64  `json:"id"`
	Password []byte `json:"password"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(&i.ID, &i.Password)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
select id, first_name, last_name, email from users where id = $1
`

type GetUserByIDRow struct {
	ID        int64  `json:"id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

func (q *Queries) GetUserByID(ctx context.Context, id int64) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}

const getUserEmailByID = `-- name: GetUserEmailByID :one
select email from users where id = $1
`

func (q *Queries) GetUserEmailByID(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRow(ctx, getUserEmailByID, id)
	var email string
	err := row.Scan(&email)
	return email, err
}

const getUserIDBySession = `-- name: GetUserIDBySession :one
select user_id from sessions where sid = $1 and ip = $2
`

type GetUserIDBySessionParams struct {
	Sid string `json:"sid"`
	Ip  string `json:"ip"`
}

func (q *Queries) GetUserIDBySession(ctx context.Context, arg GetUserIDBySessionParams) (int64, error) {
	row := q.db.QueryRow(ctx, getUserIDBySession, arg.Sid, arg.Ip)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const updateSessionExpiration = `-- name: UpdateSessionExpiration :exec
update sessions set expires_at = $1 where sid = $2
`

type UpdateSessionExpirationParams struct {
	ExpiresAt time.Time `json:"expires_at"`
	Sid       string    `json:"sid"`
}

func (q *Queries) UpdateSessionExpiration(ctx context.Context, arg UpdateSessionExpirationParams) error {
	_, err := q.db.Exec(ctx, updateSessionExpiration, arg.ExpiresAt, arg.Sid)
	return err
}
